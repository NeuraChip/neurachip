# ==============================================================================
FROM ubuntu:22.04 as builder
ENV DEBIAN_FRONTEND="noninteractive"

# Development Tools
RUN apt update && apt install -y curl wget tree less git vim tmux htop parallel unzip rsync

# Compilers
# RUN apt update && apt install -y clang-15 lld-15 clang-format-15 && \
#   ln -s /usr/bin/clang-15 /usr/bin/clang && \
#   ln -s /usr/bin/clang++-15 /usr/bin/clang++  && \
#   ln -s //usr/bin/clang-format-10 /usr/bin/clang-format

RUN apt update && apt-get install -y \
    libssl-dev \
    pkg-config \
    cmake \
    # For pecl
    autoconf \
    g++ \
    make \
    openssl \
    libcurl4-openssl-dev \
    mailutils \
    gnupg \
    sudo

RUN apt update && apt install -y python3 python3-pip

# Boost C++ Libraries
WORKDIR /external
RUN curl -OL https://boostorg.jfrog.io/artifactory/main/release/1.81.0/source/boost_1_81_0.tar.gz && \
    tar -xzf boost_1_81_0.tar.gz && \
    rm boost_1_81_0.tar.gz

WORKDIR /external/boost_1_81_0

RUN ./bootstrap.sh --prefix=/usr/local && \
    ./b2 -j 6 install

# MongoDB C++ Driver from: https://www.mongodb.com/docs/languages/cpp/drivers/current/installation/linux/
WORKDIR /external
RUN curl -OL https://github.com/mongodb/mongo-cxx-driver/releases/download/r3.10.1/mongo-cxx-driver-r3.10.1.tar.gz && \
    tar -xzf mongo-cxx-driver-r3.10.1.tar.gz && \
    rm mongo-cxx-driver-r3.10.1.tar.gz

WORKDIR /external/mongo-cxx-driver-r3.10.1/build
RUN cmake .. \
       -DCMAKE_BUILD_TYPE=Release \
       -DMONGOCXX_OVERRIDE_DEFAULT_INSTALL_PREFIX=OFF && \
    cmake --build . --target install

# Mongo DB Server
WORKDIR /external
RUN curl -fsSL https://www.mongodb.org/static/pgp/server-7.0.asc | \
    gpg -o /usr/share/keyrings/mongodb-server-7.0.gpg \
    --dearmor && \
    echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-7.0.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse" | tee /etc/apt/sources.list.d/mongodb-org-7.0.list && \
    apt update && apt install -y mongodb-org

# Mongo DB on WSL must be started with:
#     sudo -u mongodb mongod --config /etc/mongod.conf

# If you are not using WSL, than you have systemd, so you can start it with:
#     sudo systemctl start mongod


# ============================================================================
FROM builder AS dev-user
# Add dev user with matching UID of the user who build the image
# ARG USER_ID
# ARG GROUP_ID
# RUN useradd -m --uid $USER_ID developer && \
#     echo "developer:devpasswd" | chpasswd && \
#     usermod -aG dialout developer && \
#     usermod -aG sudo developer


# USER developer
# WORKDIR /home/developer
# WORKDIR /home
RUN git clone https://github.com/agostini01/dotfiles.git && \
    \
    ln -sf dotfiles/.gitignore_global .gitignore_global && \
    \
    curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim && \
    \
    ln -sf dotfiles/.vimrc            .vimrc && \
    ln -sf dotfiles/.ctags            .ctags && \
    ln -sf dotfiles/.inputrc          .inputrc && \
    \
    git clone https://github.com/tmux-plugins/tpm .tmux/plugins/tpm && \
    ln -sf dotfiles/.tmux.conf        .tmux.conf

RUN echo "PS1='\[\033[01;31m\][\[\033[01;30m\]\u@\h\[\033[01;36m\] \W\[\033[01;31m\]]\$\[\033[00m\] '" >> .bashrc

# Select clang compiler and set SystemC home
# RUN echo "export CXX=/usr/bin/clang++" >> ~/.bashrc && \
#     echo "export CC=/usr/bin/clang" >> ~/.bashrc

# Print welcome message
# WORKDIR /home/developer
WORKDIR /home
RUN echo "echo 'Welcome to the NEURACHIP tools container'" >> ~/.bashrc && \
    echo "echo ' '" >> ~/.bashrc && \
    echo "echo 'NOTE:'" >> ~/.bashrc && \
    echo "echo '    /working_dir folder was volume mounted'" >> ~/.bashrc && \
    echo "echo ' '" >> ~/.bashrc 

# Install python packages to generate plots
RUN pip3 install numpy matplotlib pandas

# Copy as developer
# COPY --chown=developer:developer . /home/ktb/git/NeuraChip
COPY . /home/ktb/git/NeuraChip

# TODO: this path has been hardcoded in NeuraSim
RUN mkdir -p /home/ktb/git/NeuraChip/NeuraSim/results_neurachip/NeuraChip_V000

WORKDIR /home/ktb/git/NeuraChip
RUN tar -xvf ./DRAMsim3-1.0.0.tar.gz -C . && \
    tar -xvf ./NeuraCompiler/data.tar.gz -C ./NeuraCompiler/. && \
    tar -xvf ./NeuraCompiler/programs/citeseer.tar.gz -C ./NeuraCompiler/programs/. && \
    tar -xvf ./NeuraCompiler/programs/cora.tar.gz -C ./NeuraCompiler/programs/. && \
    tar -xvf ./NeuraCompiler/programs/pubmed.tar.gz -C ./NeuraCompiler/programs/. && \
    tar -xvf ./softwares.tar.gz -C .

# Generate the DRAMsim3 library at DRAMsim3-1.0.0/
RUN rm -rf DRAMsim3-1.0.0/build && \
    mkdir -p DRAMsim3-1.0.0/build && \
    cd DRAMsim3-1.0.0/build && \
    cmake .. && \
    make -j 6

ENV LD_LIBRARY_PATH=/usr/local/lib:/home/ktb/git/NeuraChip/DRAMsim3-1.0.0:$LD_LIBRARY_PATH
